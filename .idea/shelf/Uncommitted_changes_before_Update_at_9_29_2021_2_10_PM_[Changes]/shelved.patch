Index: templates/rgb.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n{% block meta %}\r\n    <script>\r\n        // Hack: add java script function to toggle image from original to gray and back (toggle)\r\n        //  document.getElementById(\"img<n>\").src\r\n        //  document.getElementID(\"img_gray<n>\").innerHTML\r\n        //  help: https://www.geeksforgeeks.org/how-to-change-the-src-attribute-of-an-img-element-in-javascript-jquery/\r\n    </script>\r\n    <title>RGB starter</title>\r\n{% endblock %}\r\n\r\n{% block content %}\r\n    <h1 class=\"text-center\">RGB values within an Image</h1>\r\n    <div class=\"container\">\r\n        <div class=\"row justify-content-md-center\">\r\n            <table class=\"table\">\r\n                <thead>\r\n                <tr>\r\n                    <th>Meta Data</th>\r\n                    <th>Image</th>\r\n                    <th>Data</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {% for image in images %}\r\n                    <tr>\r\n                        <td>\r\n                            <div>{{image.label}}</div>\r\n                            <div>{{image.source}}</div>\r\n                            <div>{{image.file}}</div>\r\n                            <div>{{image.format}}</div>\r\n                            <div>{{image.size}}</div>\r\n                        </td>\r\n                        <td>\r\n                            <img class=\"img-responsive py-3\" id=img{{loop.index}} alt=\"\" width=\"256\" height=\"Auto\" src=\"{{image.base64}}\" >\r\n                            <!-- Hack: create button (btn{{loop.index}} to  call java script function\r\n                               pass index to allow you to toggle images with hidden id's\r\n                               {{image.base64}}  original image\r\n                               {{image.base64_GRAY}}  gray scale image\r\n                            -->\r\n                            <button onclick = \"GFG_Fun()\">Gray Scale</button>\r\n                            <script>\r\n                                function make_gray(){\r\n                                    document.getElementById(\"img<n>\").src\r\n                                    document.getElementID(\"img_gray<n>\").innerHTML = starter/img/lassen-volcano-256.jpg\r\n                                }\r\n                            </script>\r\n\r\n\r\n                            <p hidden id=\"img_orig{{loop.index}}\">{{image.base64}}</p>\r\n                            <p hidden id=\"img_gray{{loop.index}}\">{{image.base64_GRAY}}</p>\r\n                        </td>\r\n                        <td>\r\n                            <div class=\"overflow-auto\" style=\"height: 256px\">\r\n                                <table class=\"table\">\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th>#</th>\r\n                                        <th>{{image.mode}}</th>\r\n                                        <th>Hex Code</th>\r\n                                        <th>Binary</th>\r\n                                    </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {% for row in image.data[:256+1] %}\r\n                                        <tr>\r\n                                            <td>{{loop.index}}</td>\r\n                                            <td>{{row}}</td>\r\n                                            <td>{{image.hex_array[loop.index - 1]}}</td>\r\n                                            <td>{{image.binary_array[loop.index - 1]}}\r\n                                        </tr>\r\n                                        {% if loop.index > 256 %}\r\n                                            <tr><td>...</td><td>truncated</td><td>...</td><td>...</td></tr>\r\n                                        {% endif %}\r\n                                    {% endfor %}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                {% endfor %}\r\n                </tbody>\r\n            </table>\r\n\r\n        </div>\r\n    </div>\r\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/rgb.html b/templates/rgb.html
--- a/templates/rgb.html	(revision 02d3eed60202c60fa7b1db92709884789b427f58)
+++ b/templates/rgb.html	(date 1632874282272)
@@ -1,4 +1,5 @@
 <!DOCTYPE html>
+{% extends "layouts/navbar.html" %}
 {% block meta %}
     <script>
         // Hack: add java script function to toggle image from original to gray and back (toggle)
@@ -25,11 +26,11 @@
                 {% for image in images %}
                     <tr>
                         <td>
-                            <div>{{image.label}}</div>
-                            <div>{{image.source}}</div>
                             <div>{{image.file}}</div>
                             <div>{{image.format}}</div>
                             <div>{{image.size}}</div>
+                            <div>{{image.label}}</div>
+                            <div>{{image.source}}</div>
                         </td>
                         <td>
                             <img class="img-responsive py-3" id=img{{loop.index}} alt="" width="256" height="Auto" src="{{image.base64}}" >
@@ -38,13 +39,7 @@
                                {{image.base64}}  original image
                                {{image.base64_GRAY}}  gray scale image
                             -->
-                            <button onclick = "GFG_Fun()">Gray Scale</button>
-                            <script>
-                                function make_gray(){
-                                    document.getElementById("img<n>").src
-                                    document.getElementID("img_gray<n>").innerHTML = starter/img/lassen-volcano-256.jpg
-                                }
-                            </script>
+
 
 
                             <p hidden id="img_orig{{loop.index}}">{{image.base64}}</p>
Index: image.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from PIL import Image, ImageDraw, ImageFont\r\nimport numpy\r\nimport base64\r\nfrom io import BytesIO\r\nfrom pathlib import Path\r\n# Import the os module\r\nimport os\r\n\r\n\r\n# image (PNG, JPG) to base64 conversion (string), learn about base64 on wikipedia https://en.wikipedia.org/wiki/Base64\r\ndef image_base64(img, img_type):\r\n    with BytesIO() as buffer:\r\n        img.save(buffer, img_type)\r\n        return base64.b64encode(buffer.getvalue()).decode()\r\n\r\n\r\n# formatter preps base64 string for inclusion, ie <img src=[this return value] ... />\r\ndef image_formatter(img, img_type):\r\n    return \"data:image/\" + img_type + \";base64,\" + image_base64(img, img_type)\r\n\r\n\r\n# color_data prepares a series of images for data analysis\r\ndef image_data(path=Path(\"static/img/\"), img_list=None):  # path of static images is defaulted\r\n    if img_list is None:  # color_dict is defined with defaults\r\n        img_list = [\r\n            {'source': \"Peter Carolin\", 'label': \"Lassen Volcano\", 'file': \"lassen-volcano-256.jpg\", 'position': (10,65), 'font': 70},\r\n            {'source': \"iconsdb.com\", 'label': \"Black square\", 'file': \"black-square-16.png\", 'position': (0,0), 'font': 5},\r\n            {'source': \"iconsdb.com\", 'label': \"Red square\", 'file': \"red-square-16.png\", 'position': (0,0), 'font': 5},\r\n            {'source': \"iconsdb.com\", 'label': \"Green square\", 'file': \"green-square-16.png\", 'position': (0,0), 'font': 5},\r\n            {'source': \"iconsdb.com\", 'label': \"Blue square\", 'file': \"blue-square-16.png\", 'position': (0,0), 'font': 5},\r\n            {'source': \"iconsdb.com\", 'label': \"White square\", 'file': \"white-square-16.png\", 'position': (0,0), 'font': 5},\r\n        ]\r\n\r\n    # gather analysis data and meta data for each image, adding attributes to each row in table\r\n    for img_dict in img_list:  # O(n*m)\r\n        file = path / img_dict['file']  # file with path for local access (backend)\r\n        # Python Image Library operations\r\n        img_reference = Image.open(file)  # PIL\r\n        d1 = ImageDraw.Draw(img_reference)\r\n        font = ImageFont.truetype(\"arial.ttf\", img_dict['font'])\r\n        d1.text(img_dict['position'], \"MARVEL\", fill=(255, 0, 0), font=font)\r\n        img_data = img_reference.getdata()  # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/\r\n        img_dict['format'] = img_reference.format\r\n        img_dict['mode'] = img_reference.mode\r\n        img_dict['size'] = img_reference.size\r\n        # Conversion of original Image to Base64, a string format that serves HTML nicely\r\n        img_dict['base64'] = image_formatter(img_reference, img_dict['format'])\r\n        # Numpy is used to allow easy access to data of image, python list\r\n        img_dict['data'] = numpy.array(img_data)\r\n        img_dict['hex_array'] = []\r\n        img_dict['binary_array'] = []\r\n        img_dict['gray_data'] = []\r\n        # 'data' is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted\r\n\r\n        for pixel in img_dict['data']:\r\n            # hexadecimal conversions\r\n            hex_value = hex(pixel[0])[-2:] + hex(pixel[1])[-2:] + hex(pixel[2])[-2:]\r\n            hex_value = hex_value.replace(\"x\", \"0\")\r\n            img_dict['hex_array'].append(\"#\" + hex_value)\r\n            # binary conversions\r\n            bin_value = bin(pixel[0])[2:].zfill(8) + \" \" + bin(pixel[1])[2:].zfill(8) + \" \" + bin(pixel[2])[2:].zfill(8)\r\n            img_dict['binary_array'].append(bin_value)\r\n        # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/\r\n        img_dict['gray_data'] = []\r\n        average = (pixel[0] + pixel[1] + pixel[2]) // 3\r\n        if len(pixel) > 3:\r\n            img_dict['gray_data'].append((average, average, average, pixel[3]))\r\n        else:\r\n            img_dict['gray_data'].append((average, average, average))\r\n        img_reference.putdata(img_dict['gray_data'])\r\n        img_dict['base64_GRAY'] = image_formatter(img_reference, img_dict['format'])\r\n    '''\r\n        n = 256\r\n        Hex_Ref = [[[None for k in range(n)] for j in range(n)] for i in range(n)]\r\n        Bin_Ref = [[[None for k in range(n)] for j in range(n)] for i in range(n)]\r\n        Gray_Ref = [[[None for k in range(n)] for j in range(n)] for i in range(n)]\r\n        for pixel in img_dict['data']:\r\n            if not Hex_Ref[pixel[0]][pixel[1]][pixel[2]]:\r\n                hex_value = hex(pixel[0])[-2:] + hex(pixel[1])[-2:] + hex(pixel[2])[-2:]\r\n                hex_value = hex_value.replace(\"x\", \"0\")\r\n                img_dict['hex_array'].append(\"#\" + hex_value)\r\n                # binary conversions\r\n                bin_value = bin(pixel[0])[2:].zfill(8) + \" \" + bin(pixel[1])[2:].zfill(8) + \" \" + bin(pixel[2])[2:].zfill(8)\r\n                img_dict['binary_array'].append(bin_value)\r\n                # gray data conversions\r\n                average = (pixel[0] + pixel[1] + pixel[2]) // 3\r\n                if len(pixel) > 3:\r\n                    img_dict['gray_data'].append((average, average, average, pixel[3]))\r\n                else:\r\n                    img_dict['gray_data'].append((average, average, average))\r\n                # Save to Reference\r\n                Hex_Ref[pixel[0]][pixel[1]][pixel[2]] = hex_value\r\n                Bin_Ref[pixel[0]][pixel[1]][pixel[2]] = bin_value\r\n                Gray_Ref[pixel[0]][pixel[1]][pixel[2]] = average\r\n            else:\r\n\r\n                img_dict['hex_array'].append(\"#\" + Hex_Ref[pixel[0]][pixel[1]][pixel[2]])\r\n                img_dict['binary_array'].append(Bin_Ref[pixel[0]][pixel[1]][pixel[2]])\r\n                average = Gray_Ref[pixel[0]][pixel[1]][pixel[2]]\r\n                if len(pixel) > 3:\r\n                    img_dict['gray_data'].append((average, average, average, pixel[3]))\r\n                else:\r\n                    img_dict['gray_data'].append((average, average, average))\r\n        img_reference.putdata(img_dict['gray_data'])\r\n        img_dict['base64_GRAY'] = image_formatter(img_reference, img_dict['format'])\r\n'''\r\n    return img_list  # list is returned with all the attributes for each image dictionary\r\n\r\n\r\n# run this as standalone tester to see data printed in terminal\r\nif __name__ == \"__main__\":\r\n    local_path = \"../static/img/\"\r\n    img_test = [\r\n        {'source': \"iconsdb.com\", 'label': \"Blue square\", 'file': \"blue-square-16.png\"},\r\n    ]\r\n    items = image_data(local_path, img_test)  # path of local run\r\n    for row in items:\r\n        # print some details about the image so you can validate that it looks like it is working\r\n        # meta data\r\n        print(\"---- meta data -----\")\r\n        print(row['label'])\r\n        print(row['format'])\r\n        print(row['mode'])\r\n        print(row['size'])\r\n        # data\r\n        print(\"----  data  -----\")\r\n        print(row['data'])\r\n        print(\"----  gray data  -----\")\r\n        print(row['gray_data'])\r\n        print(\"----  hex of data  -----\")\r\n        print(row['hex_array'])\r\n        print(\"----  bin of data  -----\")\r\n        print(row['binary_array'])\r\n        # base65\r\n        print(\"----  base64  -----\")\r\n        print(row['base64'])\r\n        # display image\r\n        print(\"----  render and write in image  -----\")\r\n        filename = local_path + row['file']\r\n        image_ref = Image.open(filename)\r\n        draw = ImageDraw.Draw(image_ref)\r\n        draw.text((0, 0), \"Size is {0} X {1}\".format(*row['size']))  # draw in image\r\n        image_ref.show()\r\nprint()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/image.py b/image.py
--- a/image.py	(revision 02d3eed60202c60fa7b1db92709884789b427f58)
+++ b/image.py	(date 1632952537897)
@@ -62,18 +62,19 @@
             img_dict['binary_array'].append(bin_value)
         # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/
         img_dict['gray_data'] = []
-        average = (pixel[0] + pixel[1] + pixel[2]) // 3
-        if len(pixel) > 3:
-            img_dict['gray_data'].append((average, average, average, pixel[3]))
-        else:
-            img_dict['gray_data'].append((average, average, average))
+        for pixel in img_dict['data']:
+            average = (pixel[0] + pixel[1] + pixel[2]) // 3
+            if len(pixel) > 3:
+                img_dict['gray_data'].append((average, average, average, pixel[3]))
+            else:
+                img_dict['gray_data'].append((average, average, average))
+
         img_reference.putdata(img_dict['gray_data'])
         img_dict['base64_GRAY'] = image_formatter(img_reference, img_dict['format'])
     '''
-        n = 256
-        Hex_Ref = [[[None for k in range(n)] for j in range(n)] for i in range(n)]
-        Bin_Ref = [[[None for k in range(n)] for j in range(n)] for i in range(n)]
-        Gray_Ref = [[[None for k in range(n)] for j in range(n)] for i in range(n)]
+        Hex_Ref[256][256][256] = []
+        Bin_Ref[256][256][256] = []
+        Gray_Ref[256][256][256] = []
         for pixel in img_dict['data']:
             if not Hex_Ref[pixel[0]][pixel[1]][pixel[2]]:
                 hex_value = hex(pixel[0])[-2:] + hex(pixel[1])[-2:] + hex(pixel[2])[-2:]
